#!/usr/bin/env ruby
begin
  require 'optparse'
  require 'timeseries/command'

  options = {
    :attributes       => nil,
    # -- leave undefined to allow defaults in command --
    # :blocking         => nil,
    # :input_mode       => nil,
    :data_attr        => 'data',
    :input_time_format => nil,
    :n_steps          => 1,
    :period           => '1s',
    :require_last_time => false,
    :signature        => [],
    :snap_start_time  => :next,
    :snap_stop_time   => :previous,
    :stream_forever   => false,
    :throttle         => nil,
    :output_time_format => 0,
    :unbuffer         => false,
    :zone             => 'UTC',
  }

  OptionParser.new do |opts|
    opts.banner = %{
  usage: timeseries [options] [PRINT_FORMATS...|FILES...]

    Generate time series data.

  options:
  }.lstrip

    opts.on("-A", "--attributes-input", "read attributes from stdin (assumes -k)") do |str|
      options[:input_mode] = :attributes
    end

    opts.on("-a", "--attributes JSON", "attributes for format") do |str|
      options[:attributes] = Timeseries::Command.load_attrs(str)
    end

    opts.on("-b", "--boundary-type TYPE", "adjust start/stop (inner)") do |code|
      case code
      when "pp"          then options.merge!(:snap_start_time => :previous, :snap_stop_time => :previous)
      when "pn", "outer" then options.merge!(:snap_start_time => :previous, :snap_stop_time => :next)
      when "np", "inner" then options.merge!(:snap_start_time => :next, :snap_stop_time => :previous)
      when "nn"          then options.merge!(:snap_start_time => :next, :snap_stop_time => :next)
      when "none"        then options.merge!(:snap_start_time => nil, :snap_stop_time => nil)
      else raise "invalid rounding type: #{code}"
      end
    end

    opts.on("-D", "--data [ATTR]", "read data feed from stdin (assumes -k)") do |value|
      options[:input_mode] = :data
      options[:data_attr]  = value if value
    end

    opts.on("--debug", "debug mode") do
      $DEBUG = true
    end

    opts.on("-e", "--time-format STRFTIME", "strftime format") do |str|
      options[:output_time_format] = str
    end

    opts.on("-F", "--format-input", "read line formats from stdin (assumes -k)") do |str|
      options[:input_mode] = :line_format
    end

    opts.on("-f", "--format SPRINTF", "sprintf line format") do |str|
      options[:line_format] = str
    end

    opts.on("-G", "--gate-input [STRFTIME]", "gate output on input times (assumes -k)") do |value|
      options[:input_mode] = :gate
      options[:input_time_format] = value if value
    end

    opts.on("-g", "--sync-gate-input [STRFTIME]", "gate starting series at first input time (assumes '-Gkb none')") do |value|
      options[:input_mode] = :sync_gate
      options[:input_time_format] = value if value
      options.merge!(:snap_start_time => nil, :snap_stop_time => nil)
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      exit
    end

    opts.on("-i", "--iso8601 [PRECISION]", "iso8601 format (default)") do |str|
      options[:output_time_format] = str.to_i
    end

    opts.on("-K", "--non-blocking", "do not block for input") do
      options[:blocking] = false
    end

    opts.on("-k", "--blocking", "block for input") do
      options[:blocking] = true
    end

    opts.on("-l", "--throttle PERIOD", "print with throttle (assumes -u)") do |value|
      options[:throttle] = Timeseries::Period.coerce(value).ref_size
      options[:unbuffer] = true
    end

    opts.on("-m", "--stream", "generate steps indefinitely") do
      options[:stream_forever] = true
    end

    opts.on("-n", "--n-steps N", "number of steps (#{options[:n_steps]})") do |n_steps|
      options[:n_steps] = n_steps.to_i
      options[:signature] << :n_steps
    end

    opts.on("-p", "--period PERIOD", "period (#{options[:period]})") do |period|
      options[:period] = period
      options[:signature] << :period
    end

    opts.on("-r", "--realtime", "throttle to period (assumes -u)") do |code|
      options[:throttle] = :realtime
      options[:unbuffer] = true
    end

    opts.on("-s", "--start START_TIME", "start time (now)") do |start_time|
      options[:start_time] = start_time
      options[:signature] << :start_time
    end

    opts.on("-t", "--stop STOP_TIME", "stop time") do |stop_time|
      options[:stop_time] = stop_time
      options[:signature] << :stop_time
    end

    opts.on("-u", "--[no-]unbuffer", "unbuffer output") do |value|
      options[:unbuffer] = value
    end

    opts.on("-v", "--only-intervals", "only print full intervals") do
      options[:require_last_time] = true
    end

    opts.on("-W", "--period-input", "reconfigures period from stdin (assumes -k)") do
      options[:input_mode] = :period
    end

    opts.on("-z", "--zone ZONE", "timezone (#{options[:zone]})") do |zone|
      options[:zone] = zone
    end
  end.parse!

  Time.zone = options[:zone]

  if options[:unbuffer]
    $stdout.sync = true
  end

  command = Timeseries::Command.new(options)
  command.process(ARGF, $stdout)

rescue Interrupt
  exit 130
rescue Errno::EPIPE 
  exit 0
rescue
  raise if $DEBUG
  $stderr.puts $!.message
  exit 1
end