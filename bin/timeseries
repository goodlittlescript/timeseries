#!/usr/bin/env ruby
begin
require 'optparse'
require "timeseries"

options = {
  :n_steps => 1,
  :period => "1s",
  :zone   => "UTC",
  :format => 0,
  :signature => [],
  :snap_start_time => :next,
  :snap_stop_time => :previous,
  :unbuffer => false,
  :mode => :stream
}

OptionParser.new do |opts|
  opts.banner = %{
usage: timeseries [options] [PRINT_FORMATS...|FILES...]

  Generate time series data.

options:
}.lstrip

  opts.on("-a", "--adjust TYPE", "adjust start/stop (inner)") do |code|
    case code
    when "pp"          then options.merge!(:snap_start_time => :previous, :snap_stop_time => :previous)
    when "pn", "outer" then options.merge!(:snap_start_time => :previous, :snap_stop_time => :next)
    when "np", "inner" then options.merge!(:snap_start_time => :next, :snap_stop_time => :previous)
    when "nn"          then options.merge!(:snap_start_time => :next, :snap_stop_time => :next)
    when "none"        then options.merge!(:snap_start_time => nil, :snap_stop_time => nil)
    else raise "invalid rounding type: #{code}"
    end
  end

  opts.on("-c", "--continue FILE", "continue from start_time in file") do |continue_file|
    options[:continue_file] = continue_file
  end

  opts.on("-d", "--debug", "debug mode") do
    $DEBUG = true
  end

  opts.on("-f", "--format FORMAT", "strftime format") do |str|
    options[:format] = str
  end

  opts.on("-g", "--[no-]range", "only print full ranges") do |value|
    options[:range] = value
  end

  opts.on("-h", "--help", "print this help") do
    puts opts
    puts
    exit
  end

  opts.on("-i", "--iso8601 [PRECISION]", "iso8601 format (0)") do |value|
    options[:format] = value.to_i
  end

  opts.on("-k", "--tick", "tick according to FILES") do
    options[:mode] = :tick
  end

  opts.on("-K", "--series-tick", "tick, limited by series") do
    options[:mode] = :series_tick
  end

  opts.on("-l", "--throttle PERIOD", "print with throttle (assumes -u)") do |value|
    options[:mode] = :throttle
    options[:throttle_period] = Timeseries::Period.coerce(value)
    options[:unbuffer] = true
  end

  opts.on("-L", "--series-throttle PERIOD", "throttle, limited by series") do |value|
    options[:mode] = :series_throttle
    options[:throttle_period] = Timeseries::Period.coerce(value)
    options[:unbuffer] = true
  end

  opts.on("-n", "--n-steps N", "number of steps (#{options[:n_steps]})") do |n_steps|
    options[:n_steps] = n_steps.to_i
    options[:signature] << :n_steps
  end

  opts.on("-p", "--period PERIOD", "period (#{options[:period]})") do |period|
    options[:period] = period
    options[:signature] << :period
  end

  opts.on("-r", "--realtime", "print in realtime (assumes -u)") do |code|
    options[:mode] = :realtime
    options[:unbuffer] = true
  end

  opts.on("-R", "--series-realtime", "realtime, limited by series") do |code|
    options[:mode] = :series_realtime
    options[:unbuffer] = true
  end

  opts.on("-s", "--start START_TIME", "start time (now)") do |start_time|
    options[:start_time] = start_time
    options[:signature] << :start_time
  end

  opts.on("-t", "--stop STOP_TIME", "stop time") do |stop_time|
    options[:stop_time] = stop_time
    options[:signature] << :stop_time
  end

  opts.on("-u", "--[no-]unbuffer", "unbuffer output (#{options[:zone]})") do |value|
    options[:unbuffer] = value
  end

  opts.on("-x", "--transform [INPUT_TIME_FORMAT]", "transform input times to a timeseries (assumes -u)") do |input_time_format|
    options[:mode] = :transform
    options[:input_format] = input_time_format
    options[:unbuffer] = true
  end

  opts.on("-z", "--zone ZONE", "timezone (#{options[:zone]})") do |zone|
    options[:zone] = zone
  end
end.parse!

Time.zone = options[:zone]
options[:start_time] ||= Time.zone.now

format = options[:format]
formatter = Timeseries::Utils.time_formatter(format)

if options[:unbuffer]
  $stdout.sync = true
end

timeseries = Timeseries.create(options)

if continue_file = options[:continue_file]
  if File.exists?(continue_file)
    options[:start_time] = File.read(continue_file).strip
    options[:signature] << :start_time
    options[:snap_start_time] = nil
    options[:snap_stop_time] = nil
    timeseries = Timeseries.create(options).offset(1)
  end

  at_exit do
    File.open(continue_file, "w") do |io|
      index = options[:index] || 0
      io << timeseries.at(index).iso8601(6)
    end
  end
end

set_options = lambda do |index, step|
  options[:last_index] = options[:index]
  options[:last_time]  = options[:time]
  options[:index] = index
  options[:time]  = formatter.call(step)

  if options[:range]
    options[:last_time] ? options : nil
  else
    options
  end
end

case mode = options[:mode]
when :stream
  printformats = ARGV.dup; ARGV.clear
  if printformats.empty?
    printformats << "%{time}"
  end

  timeseries.each_with_index do |step, index|
    if set_options.call(index, step)
      printformats.each do |printformats|
        puts printformats % options
      end
    end
  end
when :tick
  index = 0
  while printformat = ARGF.gets
    step = timeseries.at(index)
    if set_options.call(index, step)
      print printformat % options
    end
    index += 1
  end
when :series_tick
  timeseries.each_with_index do |step, index|
    if printformat = ARGF.gets
      set_options.call(index, step)
      print printformat % options
    else
      break
    end
  end
when :throttle
  period = options[:throttle_period]
  current_time = Time.zone.now
  printformats = ARGV.dup; ARGV.clear
  if printformats.empty?
    printformats << "%{time}"
  end
  index = 0
  loop do
    step = timeseries.at(index)
    if set_options.call(index, step)
      printformats.each do |printformats|
        puts printformats % options
      end
    end
    index += 1
    next_time = current_time.advance(period.data)
    sleep(next_time - current_time)
    current_time = next_time
  end
when :series_throttle
  period = options[:throttle_period]
  current_time = Time.zone.now
  printformats = ARGV.dup; ARGV.clear
  if printformats.empty?
    printformats << "%{time}"
  end
  index = 0
  timeseries.each_with_index do |step, index|
    if set_options.call(index, step)
      printformats.each do |printformats|
        puts printformats % options
      end
    end
    next_time = current_time.advance(period.data)
    sleep(next_time - current_time)
    current_time = next_time
  end
when :realtime
  printformats = ARGV.dup; ARGV.clear
  if printformats.empty?
    printformats << "%{time}"
  end

  index = 0
  step  = timeseries.at(index)
  loop do
    if set_options.call(index, step)
      printformats.each do |printformats|
        puts printformats % options
      end
    end

    index += 1
    next_step = timeseries.at(index)
    sleep(next_step - step)
    step = next_step
  end
when :series_realtime
  printformats = ARGV.dup; ARGV.clear
  if printformats.empty?
    printformats << "%{time}"
  end

  step = nil
  timeseries.each_with_index do |next_step, next_index|
    if step
      if set_options.call(next_index - 1, step)
        printformats.each do |printformats|
          puts printformats % options
        end
      end
      sleep(next_step - step)
    end

    step = next_step
  end

  if set_options.call(timeseries.n_step - 1, step)
    printformats.each do |printformats|
      puts printformats % options
    end
  end
when :transform
  printformats = ARGV.dup; ARGV.clear
  if printformats.empty?
    printformats << "%{time}"
  end

  timeseries_bounds_specified = (options[:signature] - [:period]).any?
  start_time = timeseries_bounds_specified ? timeseries.start_time : nil
  stop_time  = timeseries_bounds_specified ? timeseries.stop_time : nil
  transformer = timeseries.transformer(:start_time => start_time, :stop_time => stop_time)

  index, last_time = 0, nil
  parser = Timeseries::Utils.time_parser(options[:input_format])
  while line = gets
    line.strip!
    time = parser.call line

    if last_time && time < last_time
      last_line = options[:input_time]
      raise "input times out of order (got #{last_line.inspect} then #{line.inspect})"
    end

    # set line (the formatted input time) as 'input_time'
    # to correspond to the formatted 'time'
    options[:input_time] = line

    transformer.each_to(time) do |step|
      if set_options.call(index, step)
        printformats.each do |printformats|
          puts printformats % options
        end
      end
      index += 1
    end

    last_time = time
  end
end

rescue Interrupt
  exit 130
rescue Errno::EPIPE 
  exit 0
rescue
  raise if $DEBUG
  $stderr.puts $!.message
  exit 1
end