#!/bin/bash
. test/integration/helper

#
# usage
#

test_timeseries_with_no_inputs_prints_time_in_iso8601 () {
timeseries | sed -e "s/[[:digit:]]/_/g" | assert_output "\
____-__-__T__:__:__Z
"
}

test_timeseries_prints_time_in_specified_print_formats () {
timeseries -f '%Y-%m-%d' "a %{time}" "b %{time}" | assert_output "\
a $(date -u +'%Y-%m-%d')
b $(date -u +'%Y-%m-%d')
"
}

test_timeseries_makes_index_available () {
timeseries -n 2 "%{index}" | assert_output "\
0
1
"
}

test_timeseries_rounds_inner_by_default () {
timeseries -s "10:03" -t "10:16" -p 5m -f '%H:%M:%S' | assert_output "\
10:05:00
10:10:00
10:15:00
"
}

#
# -c
#

test_timeseries_c_continues_series_from_start_time_in_file () {
mkdir -p "$ts_test_dir"
config_file="$ts_test_dir/config"
output_file="$ts_test_dir/output"

timeseries -s "2010-01-01T00:00:40Z" -p 1s -n 2 -c "$config_file" > "$output_file"
printf -- "--\n" >> "$output_file"
timeseries -c "$config_file" -p 10s >> "$output_file"
printf -- "--\n" >> "$output_file"
timeseries -c "$config_file" -n 3 >> "$output_file"

cat "$output_file" | assert_output "\
2010-01-01T00:00:40Z
2010-01-01T00:00:41Z
--
2010-01-01T00:00:51Z
--
2010-01-01T00:00:52Z
2010-01-01T00:00:53Z
2010-01-01T00:00:54Z
"
}

#
# -g
#

test_timeseries_g_prints_only_full_ranges () {
timeseries -s "10:03" -t "10:16" -p 5m -f '%H:%M:%S' -g '%{last_time} %{time}' | assert_output "\
10:05:00 10:10:00
10:10:00 10:15:00
"
}

#
# -k
#

test_timeseries_tick_reads_formats_from_stdin () {
printf "%s %%{time}\n" a b |
timeseries -f '%S' -s "00:00" -k | assert_output "\
a 00
b 01
"
}

test_timeseries_tick_ignores_series_end () {
printf "%s %%{time}\n" a b c d e |
timeseries -f '%S' -s "00:00" -n 3 -k | assert_output "\
a 00
b 01
c 02
d 03
e 04
"
}

test_timeseries_tick_treats_args_as_files () {
mkdir -p "$ts_test_dir"
one="$ts_test_dir/one"
two="$ts_test_dir/two"

printf "%s %%{time}\n" a b > "$one"
printf "%s %%{time}\n" c > "$two"

timeseries -f '%S' -s "00:00" -k "$one" "$two" | assert_output "\
a 00
b 01
c 02
"
}

#
# -K
#

test_timeseries_series_tick_stops_according_to_series () {
printf "%s %%{time}\n" a b c d e |
timeseries -f '%S' -s "00:00" -n 3 -K | assert_output "\
a 00
b 01
c 02
"
}

#
# -h,--help
#

test_timeseries_h_prints_help () {
timeseries -h | grep -q 'usage: timeseries'
}

test_timeseries_help_prints_help () {
timeseries --help | grep -q 'usage: timeseries'
}

#
# -i
#

test_timeseries_i_prints_iso8601_with_precision () {
timeseries -i 6 | sed -e "s/[[:digit:]]/_/g" | assert_output "\
____-__-__T__:__:__.______Z
"
}

#
# -n
#

test_timeseries_n_assumes_period () {
timeseries -f '%Y-%m-%d' -n 3 | assert_output "\
$(date -u +'%Y-%m-%d')
$(date -u +'%Y-%m-%d')
$(date -u +'%Y-%m-%d')
"
}

#
# -x
#

test_timeseries_x_transforms_input_times_according_to_period () {
timeseries -p 5s -n 3 -s "2010-01-01T00:00:00Z" |
timeseries -p 2s -x | assert_output "\
2010-01-01T00:00:00Z
2010-01-01T00:00:02Z
2010-01-01T00:00:04Z
2010-01-01T00:00:06Z
2010-01-01T00:00:08Z
2010-01-01T00:00:10Z
"
}

test_timeseries_x_transforms_input_times_according_to_specified_start_and_stop_times () {
timeseries -p 5s -s "2010-01-01T00:00:00Z" -t "2010-01-01T00:00:30Z" |
timeseries -p 2s -x -a none -s "2010-01-01T00:00:11Z" -t "2010-01-01T00:00:21Z" | assert_output "\
2010-01-01T00:00:11Z
2010-01-01T00:00:13Z
2010-01-01T00:00:15Z
2010-01-01T00:00:17Z
2010-01-01T00:00:19Z
2010-01-01T00:00:21Z
"
}

test_timeseries_x_transforms_input_times_according_to_specified_start_and_n () {
timeseries -p 5s -s "2010-01-01T00:00:00Z" -t "2010-01-01T00:00:30Z" |
timeseries -p 2s -x -a none -s "2010-01-01T00:00:11Z" -n 2 | assert_output "\
2010-01-01T00:00:11Z
2010-01-01T00:00:13Z
"
}

test_timeseries_x_transforms_continues_indefinitely_if_start_is_specified_alone () {
timeseries -p 5s -s "2010-01-01T00:00:00Z" -t "2010-01-01T00:00:10Z" |
timeseries -p 2s -x -s "2010-01-01T00:00:06Z" | assert_output "\
2010-01-01T00:00:06Z
2010-01-01T00:00:08Z
2010-01-01T00:00:10Z
"
}

test_timeseries_x_parses_input_times_according_to_format () {
timeseries -p 5s -n 3 -s "2010-01-01T00:00:00Z" -f "%s" |
timeseries -p 2s -x "%s" | assert_output "\
2010-01-01T00:00:00Z
2010-01-01T00:00:02Z
2010-01-01T00:00:04Z
2010-01-01T00:00:06Z
2010-01-01T00:00:08Z
2010-01-01T00:00:10Z
"
}

test_timeseries_x_creates_error_for_out_of_order_times () {
printf "%s\n" 1 2 2 3 1 | timeseries -p 2s -x "%s" 2>&1 | sort | assert_output "\
1970-01-01T00:00:01Z
1970-01-01T00:00:03Z
input times out of order (got \"3\" then \"1\")
"
}

. ts
